#include "app_includes.h"
#include <signal.h>
#include "app_ota.h"

static pthread_t lvgl_tick_tid;
static pthread_t lvgl_tid;

void sigHandle(int sig)
{
    switch (sig)
    {
        case SIGPIPE:
            OsLog(LOG_ERROR, "*** catch signal : SIGPIPE, value = %d\n", sig);
            break;
        default:
            OsLog(LOG_ERROR, "*** catch signal, value = %d\n", sig);
            exit(0);
            break;
    }
}

void signalHandle(){
    signal(SIGPIPE, sigHandle);	//Ignore signal
    signal(SIGINT, sigHandle);  //Ctrl + C
    signal(SIGTERM, sigHandle); //Software termination initiated by kill
    signal(SIGBUS, sigHandle);  //Bus Error
    signal(SIGSEGV, sigHandle); //Illegal memory access
    signal(SIGFPE, sigHandle);  //Mathematical-related anomalies, such as division by zero, floating-point overflow, etc
    signal(SIGABRT, sigHandle); //Generated by calling the abort function, the process exited abnormally
}

extern "C" int ymframwork_init(int argc, char *argv[]);
extern "C" int ymframwork_finish(int ret);


void lvgl_disp_pause(int runstate, void *par)
{
    disp_disable_update();
}
void lvgl_disp_resume(int runstate, void *par)
{
    disp_enable_update();
}

void file_test()
{
        int ret = 0;
    int fd = 0;
    unsigned char m = 0;

       m = O_CREAT|O_RDWR;

    ret = open((char*)"/tmp/firmware.apk", m, S_IREAD|S_IWRITE);
    OsLog(LOG_DEBUG,"-------%s,%d-----open file ret = %s\r\n", __FUNCTION__, __LINE__,strerror(errno));
    if (ret < 0)
    {
        return;
    }

    fd = ret;
    lseek(fd, 0, SEEK_SET);
}
#define CHAR2LONG(c0, c1, c2, c3)		(unsigned long)((c0)<<24|(c1)<<16|(c2)<<8|(c3))
int main(int argc, char *argv[])
{
    PR_INT32 ret;
    ymframwork_init(argc, argv);//system api
      Disp_vRegisterPauseCallBack(lvgl_disp_pause);
    Disp_vRegisterResumeCallBack(lvgl_disp_resume);
    Disp_vInit(); //UI  init
    Disp_vSetStatusBarStatus(0);
    OsSetSysSleepStatus(1); //Temporarily set to not allow hibernation

    char szAppId[] = "linux_pos_app";
    OsLogSetTag(szAppId);  //set logcat tag
    DB_bInit(szAppId); //database init
    signalHandle();
    EmvL2_Init();
    thread_init();
    if (pthread_create(&lvgl_tick_tid, NULL, tick_thread, NULL) != 0)
        printf("can't create thread\n");
      
    larktms_init();
    appStart();

    ymframwork_finish(ret);//system api
    return 0;
}

